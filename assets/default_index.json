{
    "Tutorial 1: Your first effect": {
        "KnobName1": "",
        "KnobDefaultValue0": "0.500000",
        "KnobName0": "",
        "KnobDefaultValue1": "0.500000",
        "KnobName3": "",
        "KnobDefaultValue2": "0.500000",
        "KnobName2": "",
        "Source": "\r\n\/*  Tutorial 1: Your first effect\r\n\r\n    Welcome to Formula!\r\n    In this tutorial you will learn the structure\r\n    of a basic effect: we will create a simple gain booster.\r\n    \r\n    NOTE: Formulas are made using the C programming language, we advise you to learn the most\r\n    basic features of that language (variables, operations, conditions).\r\n\r\n    An audio signal is made of a sequence of samples.\r\n    \r\n    All the code you put between 'formula_main {' and '}' will be executed for each sample.\r\n    \r\n    You want to process each input sample and return it as a modified output sample.\r\n    \r\n    Inside formula_main, you can access your input sample as the float variable 'input'.\r\n    Here, we multiply the input sample by 2, hence doubling the gain of our input.\r\n    \r\n    The result is stored in a new variable 'boostedInput', and we use the \r\n    'return' keyword to return this variable as our modified output.\r\n*\/\r\n\nformula_main {\n    float boostedInput = input * 2;\r\n    \n    return boostedInput;\n}\r\n\r\n\/* Try changing the gain value, hit the play button in Formula and play a sound in your track! *\/",
        "KnobDefaultValue3": "0.500000",
        "KnobName5": "",
        "KnobDefaultValue11": "0.500000",
        "KnobDefaultValue4": "0.500000",
        "KnobName4": "",
        "KnobDefaultValue10": "0.500000",
        "KnobDefaultValue5": "0.500000",
        "KnobName7": "",
        "KnobDefaultValue6": "0.500000",
        "KnobName6": "",
        "KnobDefaultValue7": "0.500000",
        "KnobName9": "",
        "KnobDefaultValue8": "0.500000",
        "KnobName8": "",
        "Name": "Tutorial 1: Your first effect",
        "KnobDefaultValue9": "0.500000",
        "CompilationId": "fe3ebea6-0b18-4e69-bd69-81a020b23972",
        "Description": "You will learn the structure of a basic effect: we will create a simple gain booster.",
        "Created": "2022-May-29 11:53:42",
        "LastModified": "2022-May-29 18:10:24",
        "SwitchName1": "",
        "SwitchDefaultValue0": "",
        "SwitchDefaultValue1": "",
        "SwitchName0": "",
        "SwitchDefaultValue2": "",
        "SwitchName2": "",
        "KnobName10": "",
        "KnobName11": ""
    },
    "Tutorial 2: Using controls": {
        "KnobName1": "",
        "KnobDefaultValue0": "0.500000",
        "KnobName0": "Gain",
        "KnobDefaultValue1": "0.500000",
        "KnobName3": "",
        "KnobDefaultValue2": "0.500000",
        "KnobName2": "",
        "Source": "\r\n\/*  Tutorial 2: Using controls\r\n\r\n    In this tutorial you will learn to make your effect react to the controls in the knobs panel.\r\n    \r\n    You can open the knob panel by clicking the blue button in the bottom of the side bar.\r\n    Knobs labels can be customized and the knobs labels and values will be saved along with your formula.\r\n\r\n    In your formula, you can access the 12 different knobs using the values KNOB_1, KNOB_2, ..., KNOB_12.\r\n    The knobs will always have a value between 0 (0%) and 1 (100%).\r\n    \r\n    You can also access the 3 switches using SWITCH_1, SWITCH2 and SWITCH_3.\r\n    The value of a switch will be either 0 (off) or 1 (on).\r\n    \r\n    Here, we will use the first switch to determine if we want to do a gain boost or a gain reduction.\r\n    We will also use the first knob to get the amount of gain we want.\r\n       \r\n    -> If the switch is checked, it is a gain reduction: we enter the first branch of the condition.\r\n    We will use our first knob to multiply the input: \r\n        - If the knob is at 0%, then 1 - KNOB_1 = 1 and our output will be equal to our input. \r\n        - If the knob is at 50%, then 1 - KNOB_1 = 0.5 so our output two times lower. \r\n        - If the knob is at 100%, then 1 - KNOB_1 = 0 and our output will be completly muted.\r\n        \r\n    -> If the switch is unchecked, it is a gain boost: we enter the else branch.\r\n        - If the knob is at 0%, then 1 - KNOB_1 = 1 and our output will be equal to our input.\r\n        - If the knob is at 50%, then 1 - KNOB_1 = 0.5 so our output two times higher.\r\n        - If the knob is at 100%, then 1 - KNOB_1 = 0 and our output have an infinite gain.\r\n*\/\r\n\nformula_main {\r\n    float output;\r\n    \r\n    int isGainReduction = SWITCH_1;\r\n    \r\n    if (isGainReduction) {\r\n        output = input * (1 - KNOB_1);\r\n    }\r\n    else {\r\n        float maxGain = 5;\n        output = input \/ (1 - KNOB_1);\r\n    }\r\n    \n    return output;\n}\r\n\r\n\/* All the knobs and switches can be automated in your DAW! *\/",
        "KnobDefaultValue3": "0.500000",
        "KnobName5": "",
        "KnobDefaultValue11": "0.500000",
        "KnobDefaultValue4": "0.500000",
        "KnobName4": "",
        "KnobDefaultValue10": "0.500000",
        "KnobDefaultValue5": "0.500000",
        "KnobName7": "",
        "KnobDefaultValue6": "0.500000",
        "KnobName6": "...",
        "KnobDefaultValue7": "0.500000",
        "KnobName9": "",
        "KnobDefaultValue8": "0.500000",
        "KnobName8": "",
        "Name": "Tutorial 2: Using controls",
        "KnobDefaultValue9": "0.500000",
        "CompilationId": "c2f6d792-5539-4dca-8045-3aad8ab7a2ad",
        "Description": "You will learn to make your effect react to the controls in the knob panel.",
        "Created": "2022-May-29 15:45:50",
        "LastModified": "2022-May-29 20:27:29",
        "SwitchDefaultValue0": "0",
        "SwitchName1": "",
        "SwitchName0": "Boost \/ Cut",
        "SwitchDefaultValue1": "0",
        "SwitchDefaultValue2": "",
        "SwitchName2": "",
        "KnobName10": "",
        "KnobName11": ""
    },
    "Tutorial 3: Math functions": {
        "KnobName1": "",
        "KnobDefaultValue0": "0.500000",
        "KnobName0": "Gain (+\/-12dB)",
        "KnobDefaultValue1": "0.500000",
        "KnobName3": "",
        "KnobDefaultValue2": "0.500000",
        "KnobName2": "",
        "Source": "\r\n\/*  Tutorial 3: Math functions\r\n\r\n    In this tutorial you will learn how to use standard math functions.\r\n    \r\n    Our previous effect had an issue: we had to use a switch to create either\r\n    a gain boost or a gain cut, and we did not have control over our maximum allowed gain.\r\n    \r\n    Hence, we will read the knob value in decibels and we will convert it to a gain.\r\n    To do so, we use the mathematical formula :\r\n        gain = 10^(decibels \/ 20)\r\n    \r\n    There is no built-in operator in the C language to make a power.\r\n    Hopefully, the standard mathematical library is shipped with the formulas!\r\n    You can find the list of all of its functions here: https:\/\/en.wikipedia.org\/wiki\/C_mathematical_functions\r\n    \r\n    Thus, we can use the 'pow(X, Y)' function to do our calculation. \r\n*\/\r\n\nformula_main {\r\n    float gainDecibels = (KNOB_1 - 0.5) * 12; \/\/ From -12dB to +12dB\r\n    float gain = pow(10, gainDecibels \/ 20); \/\/ Convert from decibels to gain\r\n\r\n    float boostedOutput = input * gain;\r\n    \n    return boostedOutput;\n}\r\n",
        "KnobDefaultValue3": "0.500000",
        "KnobName5": "",
        "KnobDefaultValue11": "0.500000",
        "KnobDefaultValue4": "0.500000",
        "KnobName4": "",
        "KnobDefaultValue10": "0.500000",
        "KnobDefaultValue5": "0.500000",
        "KnobName7": "",
        "KnobDefaultValue6": "0.500000",
        "KnobName6": "",
        "KnobDefaultValue7": "0.500000",
        "KnobName9": "",
        "KnobDefaultValue8": "0.500000",
        "KnobName8": "",
        "Name": "Tutorial 3: Math functions",
        "KnobDefaultValue9": "0.500000",
        "CompilationId": "e42ee789-2434-42f5-a479-756b3576fc54",
        "Description": "You will learn how to use standard math functions.",
        "Created": "2022-May-29 16:00:56",
        "LastModified": "2022-May-29 20:31:56",
        "SwitchName1": "...",
        "SwitchDefaultValue0": "0",
        "SwitchDefaultValue1": "0",
        "SwitchName0": "",
        "SwitchDefaultValue2": "",
        "SwitchName2": "",
        "KnobName10": "",
        "KnobName11": ""
    },
    "Tutorial 4: Using time": {
        "KnobName1": "LFO (0 to 10Hz)",
        "KnobDefaultValue0": "0.500000",
        "KnobName0": "Gain (+\/-12dB)",
        "KnobDefaultValue1": "0.500000",
        "KnobName3": "",
        "KnobDefaultValue2": "0.500000",
        "KnobName2": "",
        "Source": "\r\n\/*  Tutorial 4: Using time\r\n\r\n    In this tutorial you will learn how to make your formula react to the time.\r\n    \r\n    We are going to convert our simple gain plugin to an tremolo.\r\n    To do so, the gain must be modulated by an LFO.\r\n    \r\n    We will use the second knob to read the frequency for our LFO, from 0 to 10Hz.\r\n    \r\n    Then, we will create a sine wave oscillating between 0 and 1 at the frequency coming from this knob,\r\n    using the TIME value which is the amount of seconds elapsed since the launch of our plugin.\r\n    \r\n    This LFO will be multiplicated by our gain coming from the first knob, and applied to our input sample.\r\n*\/\r\n\nformula_main {\r\n    float gainDecibels = (KNOB_1 - 0.5) * 12; \/\/ From -12dB to +12dB\r\n    float gain = pow(10, gainDecibels \/ 20); \/\/ Convert from decibels to gain\r\n    \r\n    float lfoFrequency = KNOB_2 * 10; \/\/ From 0 to 10Hz\r\n    float lfo = gain * sin(2 * M_PI * lfoFrequency * TIME);\r\n    \r\n    float output = input * lfo;\r\n    \n    return output;\n}\r\n",
        "KnobDefaultValue3": "0.500000",
        "KnobName5": "",
        "KnobDefaultValue11": "0.500000",
        "KnobDefaultValue4": "0.500000",
        "KnobName4": "",
        "KnobDefaultValue10": "0.500000",
        "KnobDefaultValue5": "0.500000",
        "KnobName7": "",
        "KnobDefaultValue6": "0.500000",
        "KnobName6": "",
        "KnobDefaultValue7": "0.500000",
        "KnobName9": "",
        "KnobDefaultValue8": "0.500000",
        "KnobName8": "",
        "Name": "Tutorial 4: Using time",
        "KnobDefaultValue9": "0.500000",
        "CompilationId": "63a5e825-1d47-4a35-86fa-01a5f65cab58",
        "Description": "You will learn how to make your formula react to the time.",
        "Created": "2022-May-29 16:12:06",
        "LastModified": "2022-May-29 20:34:27",
        "SwitchName1": "...",
        "SwitchDefaultValue0": "0",
        "SwitchDefaultValue1": "0",
        "SwitchName0": "",
        "SwitchDefaultValue2": "",
        "SwitchName2": "",
        "KnobName10": "",
        "KnobName11": ""
    },
    "Tutorial 5: State management using globals": {
        "KnobName1": "LFO (0 to 10Hz)",
        "KnobDefaultValue0": "0.500000",
        "KnobName0": "Gain (+\/-12dB)",
        "KnobDefaultValue1": "0.500000",
        "KnobName3": "",
        "KnobDefaultValue2": "0.500000",
        "KnobName2": "Filter (20Hz to 20kHz)",
        "Source": "\r\n\/*  Tutorial 5: State management using globals\r\n\r\n    In this tutorial you will learn how you can store a value for later use.\r\n    \r\n    Sometimes, you need to compute a value using a sample and get this value back some time after.\r\n    To do so in a formula, you would declare a global variable outside of the 'formula_main {...}' block.\r\n    \r\n    Such a variable will be defined once at startup, and you could read and\/or write to it in the formula_main\r\n    block. The difference with a local variable is that the value of this global variable would not be\r\n    discarded at the end of the 'formula_main' block.\r\n    \r\n    Let's add a low-pass filter on top of our LFO. \r\n    The technical implementation is out of scope, but keep in mind that such a filter\r\n    needs to know its output from the previous sample.\r\n    \r\n    What we will do, is to create a global variable called 'previousOutput'.\r\n    We will use this variable for our filter processing, and update it once we are done.\r\n    \r\n    Note that we also use the SAMPLE_RATE value, often essential to produce an invariant processing for \r\n    any sample rate coming from the host.\r\n*\/\r\n\r\nfloat previousOutput = 0;\r\n\nformula_main {\r\n    \/\/ Gain section\r\n    float gainDecibels = (KNOB_1 - 0.5) * 12; \/\/ From -12dB to +12dB\r\n    float gain = pow(10, gainDecibels \/ 20); \/\/ Convert from decibels to gain\r\n    \r\n    \/\/ LFO section\r\n    float lfoFrequency = KNOB_2 * 10; \/\/ From 0 to 10Hz\r\n    float lfo = gain * sin(2 * M_PI * lfoFrequency * TIME);    \r\n    float lfoOutput = input * lfo;    \r\n    \r\n    \/\/ Filter section\r\n    float filterFrequency = 20 + KNOB_3 * 20000; \/\/ From 20Hz to 20kHz\r\n    float alpha = exp(-filterFrequency \/ SAMPLE_RATE);\r\n    float filterOutput = previousOutput * alpha + lfoOutput * (1 - alpha);\r\n    previousOutput = filterOutput;\r\n    \n    return filterOutput;\n}\r\n\r\n\/* NOTES: \r\n    - Don't forget to initialize your global variables!\r\n    - If you declare a local variable with the same name than a global, it will overwrite it\r\n    without throwing any error!\r\n*\/",
        "KnobDefaultValue3": "0.500000",
        "KnobName5": "",
        "KnobDefaultValue11": "0.500000",
        "KnobDefaultValue4": "0.500000",
        "KnobName4": "",
        "KnobDefaultValue10": "0.500000",
        "KnobDefaultValue5": "0.500000",
        "KnobName7": "",
        "KnobDefaultValue6": "0.500000",
        "KnobName6": "",
        "KnobDefaultValue7": "0.500000",
        "KnobName9": "",
        "KnobDefaultValue8": "0.500000",
        "KnobName8": "",
        "Name": "Tutorial 5: State management using globals",
        "KnobDefaultValue9": "0.500000",
        "CompilationId": "4014377b-72a7-4251-b0fa-299dc629aa0f",
        "Description": "You will learn how you can store a value for later use.",
        "Created": "2022-May-29 16:33:00",
        "LastModified": "2022-May-29 20:37:38",
        "SwitchName1": "...",
        "SwitchDefaultValue0": "0",
        "SwitchDefaultValue1": "0",
        "SwitchName0": "",
        "SwitchDefaultValue2": "",
        "SwitchName2": "",
        "KnobName10": "",
        "KnobName11": ""
    },
    "Tutorial 6: Going stereo": {
        "KnobName1": "LFO (0 to 10Hz)",
        "KnobDefaultValue0": "0.500000",
        "KnobName0": "Gain (+\/-12dB)",
        "KnobDefaultValue1": "0.500000",
        "KnobName3": "Panning",
        "KnobDefaultValue2": "0.500000",
        "KnobName2": "Filter (20Hz to 20kHz)",
        "Source": "\r\n\/*  Tutorial 6: Going stereo\r\n\r\n    In this tutorial you will learn how to produce a different output for the left and right channels.\r\n    \r\n    Until now, all the tutorial effects were invariantly repeated for every audio channel. \r\n    But sometimes, you need to control the left and right channels independently.\r\n    \r\n    In a formula, you would use a 'formula_main_stereo {...}' block instead. The input variable would\r\n    not be a simple float value, but a Stereo variable holding two members: input.left and input.right.\r\n    \r\n    In the same way, the output that you will return has to be a Stereo variable.\r\n*\/\r\n\r\nfloat previousOutput[2] = {0};\r\n\nformula_main_stereo {\r\n    \/\/ Gain section\r\n    float gainDecibels = (KNOB_1 - 0.5) * 12; \/\/ From -12dB to +12dB\r\n    float gain = pow(10, gainDecibels \/ 20); \/\/ Convert from decibels to gain\r\n    \r\n    \/\/ LFO section\r\n    float lfoFrequency = KNOB_2 * 10; \/\/ From 0 to 10Hz\r\n    float lfo = gain * sin(2 * M_PI * lfoFrequency * TIME);\r\n    float lfoOutputLeft = input.left * lfo;    \r\n    float lfoOutputRight = input.right * lfo; \r\n    \r\n    \/\/ Filter section\r\n    float filterFrequency = 20 + KNOB_3 * 20000; \/\/ From 20Hz to 20kHz\r\n    float alpha = exp(-filterFrequency \/ SAMPLE_RATE);\r\n    float filterOutputLeft = previousOutput[0] * alpha + lfoOutputLeft * (1 - alpha);\r\n    float filterOutputRight = previousOutput[1] * alpha + lfoOutputRight * (1 - alpha);\r\n    previousOutput[0] = filterOutputLeft;\r\n    previousOutput[1] = filterOutputRight;\r\n    \r\n    \/\/ Panning section\r\n    float panning = KNOB_4; \/\/ 0% = Left, 100% = Right\r\n    float panningOutputLeft = filterOutputLeft * (1 - panning);\r\n    float panningOutputRight = filterOutputRight * panning;\r\n    \r\n    Stereo output;\r\n    output.left = panningOutputLeft;\r\n    output.right = panningOutputRight;\r\n    \n    return output;\n}\r\n\r\n\/* NOTES:\r\n    - We used an array to store the filter state, it is often more handy when working with\r\n    multiple channels.\r\n*\/",
        "KnobDefaultValue3": "0.500000",
        "KnobName5": "",
        "KnobDefaultValue11": "0.500000",
        "KnobDefaultValue4": "0.500000",
        "KnobName4": "",
        "KnobDefaultValue10": "0.500000",
        "KnobDefaultValue5": "0.500000",
        "KnobName7": "",
        "KnobDefaultValue6": "0.500000",
        "KnobName6": "",
        "KnobDefaultValue7": "0.500000",
        "KnobName9": "",
        "KnobDefaultValue8": "0.500000",
        "KnobName8": "",
        "Name": "Tutorial 6: Going stereo",
        "KnobDefaultValue9": "0.500000",
        "CompilationId": "1841c7b0-fa12-4da0-ae07-0cc1644a3dcc",
        "Description": "You will learn how to produce a different output for the left and right channels.",
        "Created": "2022-May-29 17:11:26",
        "LastModified": "2022-May-29 20:38:57",
        "SwitchName1": "...",
        "SwitchDefaultValue0": "0",
        "SwitchDefaultValue1": "0",
        "SwitchName0": "",
        "SwitchDefaultValue2": "",
        "SwitchName2": "",
        "KnobName10": "",
        "KnobName11": ""
    },
    "Tutorial 7: Advanced concepts": {
        "KnobName1": "LFO (0 to 10Hz)",
        "KnobDefaultValue0": "0.500000",
        "KnobName0": "Gain (+\/-12dB)",
        "KnobDefaultValue1": "0.500000",
        "KnobName3": "",
        "KnobDefaultValue2": "0.500000",
        "KnobName2": "Filter (20Hz to 20kHz)",
        "Source": "\r\n\/*  Tutorial 7: Advanced concepts\r\n\r\n    In this tutorial you will learn about some more advanced features of Formula.\r\n    \r\n    1) Differences with C language\r\n    Formula uses a C language compiler, but there are some restrictions that apply, mostly\r\n    for security or compatibility reasons:\r\n        - You can't use the C preprocessor. If you want to #include an external library, it is not possible.\r\n        As of now, only stdlib.h and math.h are included by default.\r\n        - You can't use dynamic memory allocation at all.\r\n        \r\n    Note that if you wish to use Formula through a private Formula Cloud tenant for your company, \r\n    Soundspear can provide you a custom build where all of those restrictions are removed, \r\n    and with additional features such as C++ support and custom compilers.\r\n    \r\n    2) Debugging formulas\r\n    You might want to debug a formula if it is not doing what it is intended to do.\r\n    You can use the DEBUG(x) macro to do so: the variable you are passing to the macro will\r\n    be dumped at a fixed interval of time and you will be able to see its value using the Debug pane by\r\n    clicking on the bug icon from the sidebar.\r\n    \r\n    3) Performance\r\n    The tutorials were not focused on performance, but keep in mind that your code will run at least\r\n    44100 times per second, hence performance should be one of your primary concerns. A good practice\r\n    is to recompute most of values only if absolutly necessary, for instance if the knobs have changed.\r\n    \r\n    4) Create a VST from a formula\r\n    A formula can be compiled as C code given a library called libformula.h, that you can find in \r\n    our Github repository.\r\n*\/\r\n\r\n\nformula_main {\r\n    DEBUG(input);\r\n    \r\n    return input;\n}\r\n",
        "KnobDefaultValue3": "0.500000",
        "KnobName5": "",
        "KnobDefaultValue11": "0.500000",
        "KnobDefaultValue4": "0.500000",
        "KnobName4": "",
        "KnobDefaultValue10": "0.500000",
        "KnobDefaultValue5": "0.500000",
        "KnobName7": "",
        "KnobDefaultValue6": "0.500000",
        "KnobName6": "",
        "KnobDefaultValue7": "0.500000",
        "KnobName9": "",
        "KnobDefaultValue8": "0.500000",
        "KnobName8": "",
        "Name": "Tutorial 7: Advanced concepts",
        "KnobDefaultValue9": "0.500000",
        "CompilationId": "6eaff75c-fda0-4a39-904b-dc701ccfab5a",
        "Description": "You will learn about some more advanced features of Formula.",
        "Created": "2022-May-29 17:58:53",
        "LastModified": "2022-May-29 20:41:00",
        "SwitchName1": "...",
        "SwitchDefaultValue0": "0",
        "SwitchDefaultValue1": "0",
        "SwitchName0": "",
        "SwitchDefaultValue2": "",
        "SwitchName2": "",
        "KnobName10": "",
        "KnobName11": ""
    },
    "Tutorial 8: What is Formula Cloud": {
        "KnobName1": "LFO (0 to 10Hz)",
        "KnobDefaultValue0": "0.500000",
        "KnobName0": "Gain (+\/-12dB)",
        "KnobDefaultValue1": "0.500000",
        "KnobName3": "",
        "KnobDefaultValue2": "0.500000",
        "KnobName2": "Filter (20Hz to 20kHz)",
        "Source": "\r\n\/*  Tutorial 8: What is Formula Cloud\r\n\r\n    Creating your own formulas are great, but testing formulas from the community is \r\n    even better.\r\n    \r\n    This is happening on Formula Cloud, under the third tab of this plugin.\r\n    \r\n    You can dig through hundred of innovative formulas and pick the one you need.\r\n    \r\n    You can also share any of the formulas you made from the 'Saved files' tab.\r\n    \r\n    NOTE: Formula Cloud is a paid feature available as a subscription on soundspear.com\r\n*\/\r\n\r\n\nformula_main { return input; }\r\n",
        "KnobDefaultValue3": "0.500000",
        "KnobName5": "",
        "KnobDefaultValue11": "0.500000",
        "KnobDefaultValue4": "0.500000",
        "KnobName4": "",
        "KnobDefaultValue10": "0.500000",
        "KnobDefaultValue5": "0.500000",
        "KnobName7": "",
        "KnobDefaultValue6": "0.500000",
        "KnobName6": "",
        "KnobDefaultValue7": "0.500000",
        "KnobName9": "",
        "KnobDefaultValue8": "0.500000",
        "KnobName8": "",
        "Name": "Tutorial 8: What is Formula Cloud",
        "KnobDefaultValue9": "0.500000",
        "CompilationId": "6eaff75c-fda0-4a39-904b-dc701ccfab5a",
        "Description": "You will be given an overview of Formula Cloud.",
        "Created": "2022-May-29 20:46:31",
        "LastModified": "2022-May-29 20:47:54",
        "SwitchName1": "...",
        "SwitchDefaultValue0": "0",
        "SwitchDefaultValue1": "0",
        "SwitchName0": "",
        "SwitchDefaultValue2": "",
        "SwitchName2": "",
        "KnobName10": "",
        "KnobName11": ""
    }
}
    